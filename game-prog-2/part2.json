[
  {
    "question": "What triggers the execution flow in event-driven programming?",
    "options": ["Time intervals", "Event triggers", "Sequential steps", "Function calls"],
    "answer": "Event triggers"
  },
  {
    "question": "What can events be triggered by?",
    "options": ["Only external users", "Only internal actions", "Both external users and internal actions", "None of the above"],
    "answer": "Both external users and internal actions"
  },
  {
    "question": "How are events processed in the event queue?",
    "options": ["In parallel", "Randomly", "One at a time", "All at once"],
    "answer": "One at a time"
  },
  {
    "question": "What is generated internally when the event queue is empty?",
    "options": ["Error event", "Idle event", "Random event", "Exit event"],
    "answer": "Idle event"
  },
  {
    "question": "What does the event loop do?",
    "options": ["Dispatches events to handlers", "Generates new events", "Loops through events and analyzes dispatch needs", "Creates event handlers"],
    "answer": "Loops through events and analyzes dispatch needs"
  },
  {
    "question": "What is the role of a dispatcher?",
    "options": ["To loop through events", "To invoke event handlers using callbacks", "To handle multiple events", "To generate events"],
    "answer": "To invoke event handlers using callbacks"
  },
  {
    "question": "Where is the logic for handling events located?",
    "options": ["In the event loop", "In the event queue", "In event handlers", "In the dispatcher"],
    "answer": "In event handlers"
  },
  {
    "question": "Can one handler handle multiple events?",
    "options": ["Yes", "No", "Only in synchronous programming", "Only with external events"],
    "answer": "Yes"
  },
  {
    "question": "What is the best practice for assigning event handlers?",
    "options": ["Multiple handlers per event", "Single handler per event with conditional logic", "No handlers for events", "Handlers assigned at runtime"],
    "answer": "Single handler per event with conditional logic"
  },
  {
    "question": "What does 'Update()' function typically handle?",
    "options": ["Collision events",  "Movement based on input", "Idle events"],
    "answer": "Movement based on input"
  },
  {
    "question": "What event is triggered when the mouse button is pressed down?",
    "options": ["OnMouseEnter", "OnMouseUp", "OnMouseDown", "OnMouseClick"],
    "answer": "OnMouseDown"
  },
  {
    "question": "What does pressing the 'X' key trigger?",
    "options": ["A single event", "Multiple events", "No events", "An error"],
    "answer": "Multiple events"
  },
  {
    "question": "Can events be nested within handlers?",
    "options": ["Yes", "No", "Only in asynchronous programming", "Only with internal events"],
    "answer": "Yes"
  },
  {
    "question": "What is the outcome of pressing space bar or shift + arrow in the context of event handlers?",
    "options": ["Player slows down", "Player jumps", "Player speeds up", "Player exits the game"],
    "answer": "Player speeds up"
  },
  {
    "question": "What is the purpose of the 'Translate' method in the 'Update()' function?",
    "options": ["To rotate objects", "To scale objects", "To move objects", "To delete objects"],
    "answer": "To move objects"
  },
  {
    "question": "What is a 'callback' function?",
    "options": ["A function that starts the program", "A function that is called at the end of an event", "A function passed as an argument to another function", "A function that calls itself"],
    "answer": "A function passed as an argument to another function"
  },
  {
    "question": "What does 'GetMouseButtonUp' detect?",
    "options": ["Mouse movement", "Mouse button release", "Mouse button double-click", "Mouse wheel scrolling"],
    "answer": "Mouse button release"
  },
  {
    "question": "What is the recommended practice for handling multiple events with the same outcome?",
    "options": ["Assign different handlers", "Use a single handler with conditional logic", "Ignore the events", "Handle them synchronously"],
    "answer": "Use a single handler with conditional logic"
  }
]
